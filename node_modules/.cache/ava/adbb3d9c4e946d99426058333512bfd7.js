'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const utils = require('../lib/utils');

test('Extracting hashtags from exit', t => {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  let tags = utils.extractTags('aqui en #Bogota con toda la #familia en #aLmuErZo ##year2017');

  t.deepEqual(_rec._expr(_rec._capt(tags, 'arguments/0'), {
    content: 't.deepEqual(tags, [\'bogota\', \'familia\', \'almuerzo\', \'year2017\'])',
    filepath: 'test/utils-test.js',
    line: 9,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[{"type":"StringLiteral","value":"bogota","range":[19,27]},{"type":"StringLiteral","value":"familia","range":[29,38]},{"type":"StringLiteral","value":"almuerzo","range":[40,50]},{"type":"StringLiteral","value":"year2017","range":[52,62]}],"range":[18,63]}],"range":[0,64]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"string"},"value":"bogota","range":[19,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"string"},"value":"familia","range":[29,38]},{"type":{"label":","},"range":[38,39]},{"type":{"label":"string"},"value":"almuerzo","range":[40,50]},{"type":{"label":","},"range":[50,51]},{"type":{"label":"string"},"value":"year2017","range":[52,62]},{"type":{"label":"]"},"range":[62,63]},{"type":{"label":")"},"range":[63,64]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec2._expr(_rec2._capt(['bogota', 'familia', 'almuerzo', 'year2017'], 'arguments/1'), {
    content: 't.deepEqual(tags, [\'bogota\', \'familia\', \'almuerzo\', \'year2017\'])',
    filepath: 'test/utils-test.js',
    line: 9,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[{"type":"StringLiteral","value":"bogota","range":[19,27]},{"type":"StringLiteral","value":"familia","range":[29,38]},{"type":"StringLiteral","value":"almuerzo","range":[40,50]},{"type":"StringLiteral","value":"year2017","range":[52,62]}],"range":[18,63]}],"range":[0,64]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"string"},"value":"bogota","range":[19,27]},{"type":{"label":","},"range":[27,28]},{"type":{"label":"string"},"value":"familia","range":[29,38]},{"type":{"label":","},"range":[38,39]},{"type":{"label":"string"},"value":"almuerzo","range":[40,50]},{"type":{"label":","},"range":[50,51]},{"type":{"label":"string"},"value":"year2017","range":[52,62]},{"type":{"label":"]"},"range":[62,63]},{"type":{"label":")"},"range":[63,64]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));

  tags = utils.extractTags('una foto que no tiene tag');
  t.deepEqual(_rec3._expr(_rec3._capt(tags, 'arguments/0'), {
    content: 't.deepEqual(tags, [])',
    filepath: 'test/utils-test.js',
    line: 17,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[],"range":[18,20]}],"range":[0,21]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"]"},"range":[19,20]},{"type":{"label":")"},"range":[20,21]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec4._expr(_rec4._capt([], 'arguments/1'), {
    content: 't.deepEqual(tags, [])',
    filepath: 'test/utils-test.js',
    line: 17,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[],"range":[18,20]}],"range":[0,21]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"]"},"range":[19,20]},{"type":{"label":")"},"range":[20,21]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));

  tags = utils.extractTags();
  t.deepEqual(_rec5._expr(_rec5._capt(tags, 'arguments/0'), {
    content: 't.deepEqual(tags, [])',
    filepath: 'test/utils-test.js',
    line: 20,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[],"range":[18,20]}],"range":[0,21]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"]"},"range":[19,20]},{"type":{"label":")"},"range":[20,21]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec6._expr(_rec6._capt([], 'arguments/1'), {
    content: 't.deepEqual(tags, [])',
    filepath: 'test/utils-test.js',
    line: 20,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[],"range":[18,20]}],"range":[0,21]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"]"},"range":[19,20]},{"type":{"label":")"},"range":[20,21]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));

  tags = utils.extractTags(null);
  t.deepEqual(_rec7._expr(_rec7._capt(tags, 'arguments/0'), {
    content: 't.deepEqual(tags, [])',
    filepath: 'test/utils-test.js',
    line: 23,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[],"range":[18,20]}],"range":[0,21]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"]"},"range":[19,20]},{"type":{"label":")"},"range":[20,21]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), _rec8._expr(_rec8._capt([], 'arguments/1'), {
    content: 't.deepEqual(tags, [])',
    filepath: 'test/utils-test.js',
    line: 23,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"tags","range":[12,16]},{"type":"ArrayExpression","elements":[],"range":[18,20]}],"range":[0,21]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"tags","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"["},"range":[18,19]},{"type":{"label":"]"},"range":[19,20]},{"type":{"label":")"},"range":[20,21]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
});

/*

test('this should pass', t => {
  t.pass()
})

test('this should fail', t => {
  t.fail()
})

// funciones_asincronas

test('this should support async/await', async t => {
  let p = Promise.resolve(42)
  let secret = await p
  t.is(secret, 42)
})

*/
//# sourceMappingURL=../node_modules/.cache/ava/adbb3d9c4e946d99426058333512bfd7.js.map